# frozen_string_literal: true

require "rails_helper"

RSpec.describe FetchMalwareScanResult do
  describe "#call" do
    subject(:call) { described_class.call(upload:) }

    let(:upload) { create(:upload) }
    let(:tags_key) { "uploads/#{upload.attachment.key}?comp=tags" }
    let(:scan_result) { "No threats found" }
    let(:response_body) { <<-XML.squish }
      <Tags>
        <Tag>
          <Key>Malware Scanning scan result</Key>
          <Value>#{scan_result}</Value>
        </Tag>
      </Tags>
      XML
    let(:stubbed_blob_service) { instance_double(AzureBlob::Client) }

    before do
      allow(AzureBlob::Client).to receive(:new).and_return(stubbed_blob_service)
      allow(stubbed_blob_service).to receive(:get_blob).and_return(
        response_body,
      )
    end

    it "calls the Azure Storage REST API for the scan result" do
      call
      expect(stubbed_blob_service).to have_received(:get_blob).with(tags_key)
    end

    context "with a successful scan result" do
      it "saves the result" do
        expect { call }.to change(upload, :malware_scan_clean?).from(false).to(
          true,
        )
      end
    end

    context "with a failed scan result" do
      let(:scan_result) { "Malicious" }

      it "saves the result" do
        expect { call }.to change(upload, :malware_scan_suspect?).from(
          false,
        ).to(true)
      end

      it "enqueues a job to remove the file" do
        expect { call }.to have_enqueued_job(ActiveStorage::PurgeJob)
      end
    end

    context "with an unsuccessful response" do
      let(:response_success) { false }

      before do
        allow(AzureBlob::Client).to receive(:new).and_raise(
          AzureBlob::Http::Error,
        )
      end

      it "saves the result" do
        expect { call }.to change(upload, :malware_scan_error?).from(false).to(
          true,
        )
      end
    end
  end
end
