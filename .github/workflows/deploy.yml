name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment ( dev or test or preprod or production )"
        required: true
        default: dev
        type: environment
        options:
          - dev
          - test
          - preprod
          - production
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
    types:
      - labeled
      - synchronize
      - reopened
      - opened
env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  docker:
    if: contains(github.event.pull_request.labels.*.name, 'deploy') || github.event_name != 'pull_request'
    name: Docker build and push
    environment: review
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker image tag
        id: image
        run: |
          echo ::set-output name=tag::$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):$GITHUB_SHA

      - name: Set KV environment variables
        if: github.actor != 'dependabot[bot]'
        run: |
          # tag build to the review env for vars and secrets
          tf_vars_file=terraform/workspace_variables/review.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo ${{ steps.image.outputs.tag }}

      - uses: azure/login@v1
        if: github.actor != 'dependabot[bot]'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        if: github.actor != 'dependabot[bot]'
        id: get-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: INFRASTRUCTURE
          key: SNYK_TOKEN

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ steps.image.outputs.tag }}
          build-args: SHA=${{ github.sha }}

      - name: Run Snyk to check Docker image for vulnerabilities
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
        with:
          image: ${{ steps.image.outputs.tag }}
          args: --file=Dockerfile --severity-threshold=high

      - name: Push docker image
        run: docker image push ${{ steps.image.outputs.tag }}

  deploy_review:
    name: Deploy to review environment
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    needs: [docker]
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    environment:
      name: review

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: review
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          pr_id: ${{ github.event.pull_request.number }}
      - name: Post sticky pull request comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            Review app deployed to ${{ steps.deploy.outputs.environment_url }}

  deploy_nonprod:
    name: Deploy to ${{ matrix.environment }} environment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.environment }}
    strategy:
      max-parallel: 1
      matrix:
        environment: [dev, test, preprod]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.environment_url }}
    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: ${{ matrix.environment }}
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          terraform_vars: workspace_variables/${{ matrix.environment }}.tfvars.json
      - uses: ./.github/workflows/actions/smoke-test
        id: smoke-test
        with:
          environment: ${{ matrix.environment }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  deploy_production:
    name: Deploy to production environment
    needs: [docker, deploy_nonprod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_production

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: production
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          terraform_vars: workspace_variables/production.tfvars.json

  deploy_environment:
    name: Deploy to ${{ github.event.inputs.environment }} environment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_${{ github.event.inputs.environment }}

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: ${{ github.event.inputs.environment }}
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
