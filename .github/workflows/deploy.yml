name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment ( dev or test or preprod or production )"
        required: true
        default: dev
        type: environment
        options:
          - dev
          - test
          - preprod
          - production
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
    types:
      - labeled
      - synchronize
      - reopened
      - opened
env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  docker:
    if: contains(github.event.pull_request.labels.*.name, 'deploy') || github.event_name != 'pull_request'
    name: Docker build and push
    environment: review
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker image tag
        id: image
        run: |
          echo "tag=$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Set KV environment variables
        if: github.actor != 'dependabot[bot]'
        run: |
          # tag build to the review env for vars and secrets
          tf_vars_file=terraform/paas/workspace_variables/review.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo ${{ steps.image.outputs.tag }}

      - uses: azure/login@v1
        if: github.actor != 'dependabot[bot]'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        if: github.actor != 'dependabot[bot]'
        id: get-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: INFRASTRUCTURE
          key: SNYK_TOKEN

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ steps.image.outputs.tag }}
          build-args: SHA=${{ github.sha }}

      - name: Run Snyk to check Docker image for vulnerabilities
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
        with:
          image: ${{ steps.image.outputs.tag }}
          args: --file=Dockerfile --severity-threshold=high

      - name: Push docker image
        run: docker image push ${{ steps.image.outputs.tag }}

  rspec:
    name: Rspec
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-retries 5
          --health-timeout 5s

      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/apply_for_qts_test
      RAILS_ENV: test
      REDIS_URL: redis://localhost:6379/0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare application environment
        uses: ./.github/actions/prepare-app-env

      - name: Build frontend
        run: yarn build && yarn build:css

      - name: Setup DB
        run: bin/rails db:test:prepare

      - name: Run DfE Analytics
        run: bin/bundle exec rails dfe:analytics:check

      - name: Run tests
        run: bin/test

  deploy_review:
    name: Deploy to review environment
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    needs: [docker, rspec]
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    environment:
      name: review

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: review
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          pr_id: ${{ github.event.pull_request.number }}
      - name: Seed the DB
        shell: bash
        run: cf run-task apply-for-qts-in-england-review-pr-${{ github.event.pull_request.number }} --command "cd /app && bundle exec rails db:seed example_data:generate review_app:configure" --wait
      - name: Post sticky pull request comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            Review app deployed to ${{ steps.deploy.outputs.environment_url }}personas

  deploy_nonprod:
    name: Deploy to ${{ matrix.environment }} environment
    runs-on: ubuntu-latest
    needs: [docker, rspec]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.environment }}
    strategy:
      max-parallel: 1
      matrix:
        environment: [dev, test, preprod]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.environment_url }}
    outputs:
      environment_name: ${{ matrix.environment }}
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: ${{ matrix.environment }}
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: ./.github/workflows/actions/smoke-test
        id: smoke-test
        with:
          environment: ${{ matrix.environment }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  deploy_production:
    name: Deploy to production environment
    needs: [docker, rspec, deploy_nonprod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_production

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: production
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  notify_slack_of_failures:
    name: Notify Slack of failures
    runs-on: ubuntu-latest
    needs: [docker, rspec, deploy_nonprod]
    environment: ${{ needs.deploy_nonprod.outputs.environment_name || 'dev'  }}
    env:
      ENVIRONMENT_NAME: ${{ needs.deploy_nonprod.outputs.environment_name || 'dev'  }}
    if: ${{ failure() && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract keyvault name from tfvars
        id: extract-keyvault-name
        run: |
          tf_vars_file=terraform/paas/workspace_variables/${{ env.ENVIRONMENT_NAME }}.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id: keyvault-yaml-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: MONITORING
          key: SLACK_WEBHOOK
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Notify Slack channel on job failure
        id: notify-slack-on-deploy-failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: Deployment of apply-for-qualified-teacher-status to ${{ env.ENVIRONMENT_NAME }} failed
          SLACK_MESSAGE: |
            Deployment to ${{ env.ENVIRONMENT_NAME }} environment failed
          SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from notify_slack_of_failures job in deploy workflow
