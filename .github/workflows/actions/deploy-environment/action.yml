name: Deploy environment
description: Deploys the application to an environment

inputs:
  environment_name:
    description: "The name of the environment"
    required: true
  docker_image:
    description: "The Docker image to deploy to the environment"
    required: true
  azure_credentials:
    description: "JSON object containing a service principal that can read from Azure Key Vault"
    required: true
  pr_id:
    description: "Pull Request number"
    required: false

outputs:
  environment_url:
    description: "The base URL for the deployed environment"
    value: ${{ steps.terraform.outputs.url }}

runs:
  using: composite
  steps:
    - name: Extract configuration from tfvars
      id: config
      run: |
        KEY_VAULT_NAME=$(jq -r '.key_vault_name' $TFVARS)
        PAAS_SPACE=$(jq -r '.paas_space' $TFVARS)

        if [ -z "$KEY_VAULT_NAME" ]; then
          echo "::error ::Failed to extract key_vault_name from $TFVARS"
          exit 1
        fi

        if [ -z "$PAAS_SPACE" ]; then
          echo "::error ::Failed to extract paas_space from $TFVARS"
          exit 1
        fi

        echo "key_vault_name=$KEY_VAULT_NAME" >> $GITHUB_OUTPUT
        echo "paas_space=$PAAS_SPACE" >> $GITHUB_OUTPUT
      shell: bash
      env:
        TFVARS: paas/workspace_variables/${{ inputs.environment_name }}.tfvars.json
      working-directory: terraform

    - uses: Azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - uses: Azure/get-keyvault-secrets@v1
      id: get_secrets
      with:
        keyvault: ${{ steps.config.outputs.key_vault_name }}
        secrets: "TFSTATE-CONTAINER-ACCESS-KEY,PAAS-USER,PAAS-PASSWORD"

    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10
        terraform_wrapper: false

    - name: Terraform
      id: terraform
      run: |
        make ci ${{ inputs.environment_name }} terraform-apply
        cd terraform/paas && echo "url=https://$(terraform output -raw apply_for_qts_in_england_fqdn)/" >> $GITHUB_OUTPUT
      env:
        ARM_ACCESS_KEY: ${{ steps.get_secrets.outputs.TFSTATE-CONTAINER-ACCESS-KEY }}
        DOCKER_IMAGE: ${{ inputs.docker_image }}
        TF_VAR_azure_sp_credentials_json: ${{ inputs.azure_credentials }}
        pr_id: ${{ inputs.pr_id }}
      shell: bash

    - uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME: ${{ steps.get_secrets.outputs.PAAS-USER }}
        CF_PASSWORD: ${{ steps.get_secrets.outputs.PAAS-PASSWORD }}
        CF_SPACE_NAME: ${{ steps.config.outputs.paas_space }}
        INSTALL_CONDUIT: true
