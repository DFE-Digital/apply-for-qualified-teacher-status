# frozen_string_literal: true

require "azure_blob"

class FetchMalwareScanResult
  include ServicePattern

  SCAN_RESULT_TAG_KEY = /Malware Scanning scan result/
  SCAN_RESULT_TAG_VALUE_CLEAN = /No threats found/

  def initialize(upload:)
    @upload = upload
  end

  def call
    return unless upload.malware_scan_pending?

    begin
      response = fetch_scan_result
    rescue Azure::Core::Http::HTTPError
      upload.malware_scan_error!
      return
    end

    update_scan_result(response)
  end

  private

  attr_reader :upload

  def blob_service
    @blob_service ||=
      AzureBlob::Client.new(
        storage_account_name: ENV["AZURE_STORAGE_ACCOUNT_NAME"],
        storage_access_key: ENV["AZURE_STORAGE_ACCESS_KEY"],
      )
  end

  def fetch_scan_result
    blob_service.call(:get, get_tags_for_blob_url)
  end

  def get_tags_for_blob_url
    @get_tags_for_blob_url ||=
      blob_service.generate_uri(
        File.join("uploads", upload.attachment.key),
        { comp: "tags" },
      )
  end

  def update_scan_result(response)
    if response.success?
      if response.body =~ SCAN_RESULT_TAG_KEY
        if response.body =~ SCAN_RESULT_TAG_VALUE_CLEAN
          upload.malware_scan_clean!
        else
          upload.malware_scan_suspect!
          upload.attachment.purge_later
        end
      end
    else
      upload.malware_scan_error!
    end
  end
end
