# frozen_string_literal: true

require "azure_blob"

class FetchMalwareScanResult
  include ServicePattern

  SCAN_RESULT_TAG_KEY = /Malware Scanning scan result/
  SCAN_RESULT_TAG_VALUE_CLEAN = /No threats found/

  def initialize(upload:)
    @upload = upload
  end

  def call
    return unless upload.malware_scan_pending?

    begin
      response = fetch_scan_result
    rescue AzureBlob::Http::Error
      upload.malware_scan_error!
      return
    end

    update_scan_result(response)
  end

  private

  attr_reader :upload

  def blob_service
    @blob_service ||=
      AzureBlob::Client.new(
        account_name: ENV["AZURE_STORAGE_ACCOUNT_NAME"],
        access_key: ENV["AZURE_STORAGE_ACCESS_KEY"],
        container: ENV["AZURE_STORAGE_CONTAINER"],
      )
  end

  def fetch_scan_result
    blob_service.get_blob("#{upload.attachment.key}?comp=tags")
  end

  def update_scan_result(response)
    if response =~ SCAN_RESULT_TAG_KEY
      if response =~ SCAN_RESULT_TAG_VALUE_CLEAN
        upload.malware_scan_clean!
      else
        upload.malware_scan_suspect!
        upload.attachment.purge_later
      end
    end
  end
end
